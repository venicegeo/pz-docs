# Pz Search Services

The Piazza Core Search infrastructure includes two services with REST APIs: **pz-search-metadata-ingest** available at https://github.com/venicegeo/pz-search-metadata-ingest, and **pz-search-query**, available at https://github.com/venicegeo/pz-search-query.  The first is a service to accept a JSON structure for metadata ingest to the Piazza Elasticsearch cluster.  The second service accepts queries to Piazza Elasticsearch instance for content discovery endpoints, accepting an HTTP POST of Elasticsearch query language (DSL).

## How to Use

REST endpoints are exposed for explicit use:
https://pz-search-metadata-ingest.venicegeo.io/
https://pz-search-query.venicegeo.io/

### Debugging

Rudimentary logging provided through the Piazza Logger service, both diagnostic **INFO** level displaying informational messages that highlight the execution of the application logic, and **ERROR** in the event of a raised exception.

## Getting Started With the REST API

To become familiar with the Search services, use data transfer tools such as **cURL** or UI data transfer tools such as **Postman** ( https://www.getpostman.com/) to interact with explicit Search service REST APIs.

The Search services standardize on Java object definitions defined the pz-jobcommon github repo (https://github.com/venicegeo/pz-jobcommon/tree/master/src/main/java/model/data/DataResource) as definitions of the JSON used in the ServiceController REST API.

Mapping the DataResource as schema basis for ingest REST endpoint, for example:
POST to https://pz-search-metadata-ingest.venicegeo.io/api/v1/data this raw JSON document:

....
"data":{
    "dataId": "Alfred E. Newman",
    "dataType": {
       "id": "PatrickUUID",
        "type": "wfs",
        "url": "http://geoserver.dev:8080/geoserver/wfs",
        "featureType": "piazza:shelters",
        "version": "1.0.0"
    },
    "metadata": {
        "name": "London",
        "availability": "nope",
        "description": "London BBOX combined with random WFS; hmmm.",
        "classType": { "classification": "unclassified" },
       "numericKeyValueList": [
         {
           "key": "velocity",
           "value": 55.5
         },
         {
           "key": "angle",
           "value": 90
         }
       ],
       "textKeyValueList": [
         {
           "key": "comment",
           "value": "I wanted a pony, but my parents got me a kitten!! %^&*%!!"
         }
       ]
    },
    "spatialMetadata": {
        "epsgCode": 1984,
        "minY": 51.28,
        "maxY": 51.69,
        "minX": -0.51,
        "maxX": 0.334
    }
}
....

Subsequently, this simple DSL query will return the stored record:

....
  {
      "query" : {
         "match" : {
             "_all" : "kitten"
          }
       }
  }
....

## Search through the Piazza Workflow

The Ingest of metadata will be coincidental with a Piazza data Ingest job.  Though not the norm, an explicit search-metadata-ingest-job is available through the Gateway:
https://pz-gateway.venicegeo.io/job:

....
{   
  "userName": "my-api-key-38n987",     "jobType": { "type": "search-metadata-ingest", "data":{
  "dataId": "dc1787d7-7a5e-4d51-a86c-a171ee103723",
  "dataType": {
    "type": "shapefile",
    "location": {
      "type": "s3",
      "bucketName": "external-public-access-test",
      "fileName": "point-shapefile.zip",
      "domainName": "s3.amazonaws.com"
    }
  },
  "spatialMetadata": {
    "coordinateReferenceSystem": "GEOGCS[\"GCS_WGS_1984\", \n  DATUM[\"D_WGS_1984\", \n    SPHEROID[\"WGS_1984\", 6378137.0, 298.257223563]], \n  PRIMEM[\"Greenwich\", 0.0], \n  UNIT[\"degree\", 0.017453292519943295], \n  AXIS[\"Longitude\", EAST], \n  AXIS[\"Latitude\", NORTH]]",
    "epsgCode": 4326,
    "minX": -109.86515258861945,
    "minY": 32.47219946485272,
    "maxX": -100.63284388599796,
    "maxY": 40.6813399349672
  },
  "metadata": {
    "description": "NOT Ingested automatically by FileWatcher.",
    "classType": {
      "classification": "unclassified"
    }
  }
} } }
....

Subsequently and symmetrically, as examples:

....
// Gateway test data for search
{
	"userName" : "my-api-key-38n987",
	"jobType" : {
		"type" : "search-metadata-ingest",
		"data" : {
			"dataId" : "Alfred E. Newman"
		}
	}
}
or
{
	"userName" : "my-api-key-38n987",
	"jobType" : {
		"type" : "search-query",
		"data" : {
			"query" : {
				"match" : {
					"_all" : "kitten"
				}
			}
		}
	}
}
or
{
	"userName" : "my-api-key-38n987",
	"jobType" : {
		"type" : "search-query",
		"data" : {
			"query" : {
				"fuzzy_like_this" : {
					"like_text" : "kiten"
				}
			}
		}
	}
}
....

## Exercising with Postman collections

metadata ingest:
https://github.com/venicegeo/pz-search-metadata-ingest/blob/master/scripts/SearchMetadataIngest.json.postman_collection

search query:
https://github.com/venicegeo/pz-search-query/blob/master/scripts/Elasticsearch%2520query%2520through%2520Gateway.json.postman_collection
